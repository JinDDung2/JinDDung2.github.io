# Project template
- name: Givemeticon
  github: f-lab-edu/givemeticon
  dates: 2023.09 ~ 2023.12
  quote: >
    기프티콘 전문 중고거래 플랫폼으로, 사용하지 않거나 만료가 임박한 기프티콘을 판매하고 저렴한 가격으로 구매할 수 있는 환경을 제공하는 서비스
  description: >
    - Java 17, Spring Boot 3.1, Mybatis, Mysql, Redis, Kafka

    - GitHub Actions을 활용하여 CI/CD 구축하여 비지니스 문제에 집중

    - Git Submodule을 도입하여 **환경 변수 관리의 유지보수성 향상 및 보안 강화**

    - OAuth 로그인을 직접 구현하여 **유연성 및 테스트 용이성 향상**

    - 이메일 인증을 회원 가입과 분리하고 비동기로 전환하여 응답속도를 5.12s -> 0.78s 개선

    - 메세지 큐를 도입하고 비동기적 처리를 통해 핵심 기능과 부가 기능을 분리하여 시스템 응답성 향상 및 확장성 강화

    - 선착순 쿠폰 데이터 일관성을 보장하기 위해 DB 비관적 락에서 분산 락으로 개선하여, **응답속도를 약 X% 향상**

- name: 내친
  github: JinDDung2/sns-practice
  dates: 2023.04 ~ 2023.06
  quote: >
    Facebook, Thread, Twitter와 같은 SNS 서비스
  description: >
    - Java 11, Spring Boot 2.7, Spring Security, JWT, Mysql, Redis, AWS

    - 분산 환경에서 안정성을 확보하는 로그인 처리
      - 세션 스토리지를 분리하고 In-memory DB로 Redis를 활용하여 **세션 데이터 불일치 문제 해결**
      - 세션은 stateful하여 사용자가 증가함에 따라 **성능에 문제**를 야기할 수 있다고 판단하여 **토큰 인증으로 전환**

    - 특정 게시글 응답속도 개선
      - 게시글 관련 기능을 개발하고 테스트 중 동일한 요청이 여러 차례 들어오는 상황에서 데이터베이스 연결 및 연산의 비효율성을 인지하여 **Redis를 활용한 글로벌 캐싱** 적용 → 인기 게시글 **응답속도 32% 증가**
      - Redis 서버의 메모리 사용에 제한을 두기 위해 **allkeys-lfu 정책을 도입**하여 캐시 **데이터를 효과적으로 관리함**으로써 서비스 성능 저하 및 서버 다운을 방지

    - Redis의 **토큰 저장소와 캐시 저장소를 분리**하고 부하를 분산하여 Redis 및 어플리케이션의 성능 최적화를 통한 **응답 속도 향상**

    - 트위터의 Push 모델을 참고하여 SNS 서비스의 타임라인 기능을 구현함으로써 **읽기 시점의 부하를 줄이고** 사용자 경험을 향상

- name: 우아한 레시피
  github: JinDDung2/woowahan-recipe
  dates: 2023.01 ~ 2023.02
  quote: >
    이커머스와 레시피 커뮤니티를 합하여 레시피에 재료들을 바로 구매 가능한 서비스
  description: >
    - Java 11, Spring Boot 2.7, Spring Security, JPA QueryDsl, Mysql, Thymeleaf, Docker, AWS Ec2, AWS S3

    - [WBS](https://docs.google.com/spreadsheets/d/1xUwk6fgmqTmHhxgPIve0l4bc1mUKWrWxojsINmFgmtc/edit#gid=0)를 활용하여 프로젝트 일정 및 진행 상황을 정리하고,
    시각적으로 파악 가능한 시스템을 구축하여 팀 간의 원활한 소통과 업무 효율성 증가

    - N:N 관계를 해소하기 위해 중간에 연결 테이블을 도입하여 각 엔터티를 연결함으로써 중복 데이터를 방지하고 시스템의 확장성을 확보

    - 스프링 시큐리티의 권한 설정을 통해 각 역할에 따라 접근 가능한 기능을 효과적으로 제어하여 시스템의 보안성을 강화

    - 멀티스레드 환경에서 **재고 데이터 일관성 유지**
      - 비관적 락을 활용하여 동시성을 제어하여 재고 불일치 문제 해결
      - 상품과 재고 데이터를 분리하여 락이 걸릴 때 상품에도 락이 걸리는 문제 해결

    - 결제 가격 위조를 방지하기 위해 서버에서 계산한 금액과 클라이언트의 요청 금액을 비교하여 **결제 시스템의 신뢰성과 안정성 향상**

    - 주문 조회 시 발견된 N+1 문제를 해결하기 위해 지연 로딩과 fetch 전략을 적용하여 JPA 쿼리 최적화를 진행하였고, 이를 통해 응답 속도를 향상
